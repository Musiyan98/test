{"mappings":"AAAC,MACG,MAAMA,EAAO,CACXC,aAAcC,SAASC,cAAc,qBACrCC,cAAeF,SAASC,cAAc,sBACtCE,MAAOH,SAASC,cAAc,iBAMhC,SAASG,IACPN,EAAKK,MAAME,UAAUC,OAAO,aAJ9BR,EAAKC,aAAaQ,iBAAiB,QAASH,GAC5CN,EAAKI,cAAcK,iBAAiB,QAASH,IARhD,GCADI,EAAER,UAAUS,OAAM,WAChBD,EAAE,oBAAoBE,MAAM,CAC1BC,UAAU,EACVC,MAAM,EACNC,aAAc,EACdC,eAAgB,EAChBC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EAChBC,UAAU,EACVC,cAAe,IACfC,cAAc,EACdC,cAAc,EACdC,kBAAkB,EAClBC,OAAO,EACPC,eAAgB,GAChBC,WAAW,OChBd,MACC,MAAMC,EAAa1B,SAASC,cAAc,sBACpC0B,EAAc3B,SAASC,cAAc,iBACrC2B,EAAe5B,SAASC,cAAc,kBAEtC4B,EAAa,KACjB,MAAMC,EAC0C,SAA9CH,EAAYI,aAAa,mBAA+B,EAC1DJ,EAAYK,aAAa,iBAAkBF,GAC3CJ,EAAWrB,UAAUC,OAAO,WAK5B2B,eAH0BH,EAEtB,mBADA,qBAE6B9B,SAASkC,OAG5CP,EAAYpB,iBAAiB,QAASsB,GACtCD,EAAarB,iBAAiB,QAASsB,GAIvCM,OAAOC,WAAW,sBAAsB7B,iBAAiB,UAAU8B,IAC5DA,EAAEC,UACPZ,EAAWrB,UAAUkC,OAAO,WAC5BZ,EAAYK,aAAa,iBAAiB,GAC1CC,eAAeO,iBAAiBxC,SAASkC,WA1B5C,GCADC,OAAO5B,iBAAiB,QAExB,WACI,IAAIkC,EAAmB,GAGH,SAAXC,EAAmBC,GACxB,IAAIC,EAAiBD,GAA4C3C,SAAS6C,iBAAiB,yBACvFD,GACAA,EAAeE,SAAQC,IACdN,EAAiBM,EAAcC,KAOjC,SAAgBD,GAC3B,IAAIE,EAAiB,KACrBR,EAAiBM,EAAcC,KAAM,EACrC,MAAME,EAAWC,SAASJ,EAAcK,QAAQL,eAAiBI,SAASJ,EAAcK,QAAQL,eAAiB,IAC3GM,EAAaF,SAASJ,EAAcO,WACpCC,EAAgB,EAChBC,EAAQC,IACLR,IAAgBA,EAAiBQ,GACtC,MAAMC,EAAWC,KAAKC,KAAKH,EAAYR,GAAkBC,EAAU,GACnEH,EAAcO,UAAYK,KAAKE,MAAMH,GAAYH,EAAgBF,IACjES,QAAQC,IAAIV,EAAa,MAAQN,EAAcO,UAAY,eAAiBI,GACxEA,EAAW,EACXvB,OAAO6B,sBAAsBR,GAE7Bf,EAAiBM,EAAcC,KAAM,GAG7Cb,OAAO6B,sBAAsBR,GAvBjBS,CAAsBlB,MA6BF,IAGhCmB,EAAW,IAAIC,sBAAqB,CAACC,EAASF,KAC9CE,EAAQtB,SAAQuB,IACZ,GAAIA,EAAMC,eAAgB,CACtB,MACM3B,EADgB0B,EAAME,OACc1B,iBAAiB,yBACvDF,EAAoB6B,QACpB9B,EAAmBC,SATrB,CACV8B,UAAW,KAiBAzE,SAAS6C,iBAAiB,eAE5BC,SAAQ4B,IACbR,EAASS,QAAQD","sources":["src/js/modal.js","src/js/slider.js","src/js/mobile-menu.js","src/js/digits-counter.js"],"sourcesContent":["(() => {\n    const refs = {\n      openModalBtn: document.querySelector(\"[data-modal-open]\"),\n      closeModalBtn: document.querySelector(\"[data-modal-close]\"),\n      modal: document.querySelector(\"[data-modal]\"),\n    };\n  \n    refs.openModalBtn.addEventListener(\"click\", toggleModal);\n    refs.closeModalBtn.addEventListener(\"click\", toggleModal);\n  \n    function toggleModal() {\n      refs.modal.classList.toggle(\"is-hidden\");\n    }\n  })();","$(document).ready(function () {\n  $('.reviews__slider').slick({\n    infinite: true,\n    loop: true,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    arrows: false,\n    dots: true,\n    adaptiveHeight: true,\n    autoplay: true,\n    autoplaySpeed: 5000,\n    pauseOnFocus: true,\n    pauseOnHover: true,\n    pauseOnDotsHover: true,\n    swipe: true,\n    touchThreshold: 10,\n    touchMove: true,\n  });\n});\n","(() => {\n  const mobileMenu = document.querySelector('.js-menu-container');\n  const openMenuBtn = document.querySelector('.js-open-menu');\n  const closeMenuBtn = document.querySelector('.js-close-menu');\n\n  const toggleMenu = () => {\n    const isMenuOpen =\n      openMenuBtn.getAttribute('aria-expanded') === 'true' || false;\n    openMenuBtn.setAttribute('aria-expanded', !isMenuOpen);\n    mobileMenu.classList.toggle('is-open');\n\n    const scrollLockMethod = !isMenuOpen\n      ? 'disableBodyScroll'\n      : 'enableBodyScroll';\n    bodyScrollLock[scrollLockMethod](document.body);\n  };\n\n  openMenuBtn.addEventListener('click', toggleMenu);\n  closeMenuBtn.addEventListener('click', toggleMenu);\n\n  // Закрываем мобильное меню на более широких экранах\n  // в случае изменения ориентации устройства.\n  window.matchMedia('(min-width: 768px)').addEventListener('change', e => {\n    if (!e.matches) return;\n    mobileMenu.classList.remove('is-open');\n    openMenuBtn.setAttribute('aria-expanded', false);\n    bodyScrollLock.enableBodyScroll(document.body);\n  });\n})();","window.addEventListener(\"load\", windowLoad);\n\nfunction windowLoad() {\n    let runningAnimation = {};\n\n    // Функція ініціалізації\n    function digitsCountersInit(digitsCountersItems) {\n        let digitsCounters = digitsCountersItems ? digitsCountersItems : document.querySelectorAll(\"[data-digits-counter]\");\n        if (digitsCounters) {\n            digitsCounters.forEach(digitsCounter => {\n                if (!runningAnimation[digitsCounter.id]) {\n                    digitsCountersAnimate(digitsCounter);\n                }\n            });\n        }\n    }\n    // Функція анімації\n    function digitsCountersAnimate(digitsCounter) {\n        let startTimestamp = null;\n        runningAnimation[digitsCounter.id] = true;\n        const duration = parseInt(digitsCounter.dataset.digitsCounter) ? parseInt(digitsCounter.dataset.digitsCounter) : 1000;\n        const startValue = parseInt(digitsCounter.innerHTML);\n        const startPosition = 0;\n        const step = (timestamp) => {\n            if (!startTimestamp) startTimestamp = timestamp;\n            const progress = Math.min((timestamp - startTimestamp) / duration, 1);\n            digitsCounter.innerHTML = Math.floor(progress * (startPosition + startValue));\n            console.log(startValue + \" - \" + digitsCounter.innerHTML + \", progress: \" + progress)\n            if (progress < 1) {\n                window.requestAnimationFrame(step);\n            } else {\n                runningAnimation[digitsCounter.id] = false;\n            }\n        };\n        window.requestAnimationFrame(step);\n    }\n    // Пуск при завантаженні сторінки\n    //digitsCountersInit();\n\n    // //Пуск при скролі (появі блока з лічильниками)\n    let options = {\n        threshold: 0.3\n    }\n    let observer = new IntersectionObserver((entries, observer) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                const targetElement = entry.target;\n                const digitsCountersItems = targetElement.querySelectorAll(\"[data-digits-counter]\");\n                if (digitsCountersItems.length) {\n                    digitsCountersInit(digitsCountersItems);\n                }\n                //  Вимкнути відслідковування після спрацювання\n                //observer.unobserve(targetElement);\n            }\n        });\n\n    }, options);\n\n    let sections = document.querySelectorAll('.advantages');\n    //if (sections.length) {\n        sections.forEach(section => {\n            observer.observe(section);\n        });\n    //}\n}\n"],"names":["refs","openModalBtn","document","querySelector","closeModalBtn","modal","toggleModal","classList","toggle","addEventListener","$","ready","slick","infinite","loop","slidesToShow","slidesToScroll","arrows","dots","adaptiveHeight","autoplay","autoplaySpeed","pauseOnFocus","pauseOnHover","pauseOnDotsHover","swipe","touchThreshold","touchMove","mobileMenu","openMenuBtn","closeMenuBtn","toggleMenu","isMenuOpen","getAttribute","setAttribute","bodyScrollLock","body","window","matchMedia","e","matches","remove","enableBodyScroll","runningAnimation","digitsCountersInit","digitsCountersItems","digitsCounters","querySelectorAll","forEach","digitsCounter","id","startTimestamp","duration","parseInt","dataset","startValue","innerHTML","startPosition","step","timestamp","progress","Math","min","floor","console","log","requestAnimationFrame","digitsCountersAnimate","observer","IntersectionObserver","entries","entry","isIntersecting","target","length","threshold","section","observe"],"version":3,"file":"index.e7b23ef6.js.map"}